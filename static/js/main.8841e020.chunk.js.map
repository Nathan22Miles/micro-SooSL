{"version":3,"sources":["components/CitationPlayer.tsx","components/Views.tsx","components/positionFeatures.tsx","components/PositionChooser.tsx","Root.ts","model/Project.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CitationPlayer","react_default","a","createElement","className","controls","src","this","props","url","autoPlay","React","Component","TopView","_ref","root","Views_GlossesListView","Views_CitationView","Views_TextInfoView","GlossesListView","_ref2","filteredGlossTexts","map","glossText","i","Views_GlossView","key","GlossView","_ref3","selectedGlossText","text","onClick","CitationView","_ref4","sign","sens","CitationPlayer_CitationPlayer","concat","path","slice","TextInfoView","_ref5","Views_GlossTextsView","Views_SentencesView","GlossTextsView","_ref6","gloss_texts","Views_GlossTextView","GlossTextView","_ref7","SentencesView","_ref8","sentences","Sentence","Views_SentenceView","sentence","SentenceView","_ref9","sentence_texts","positionFeatures","Object","assign","ry","rx","cy","cx","Wrapper","featureName","contents","positions","includes","console","log","indexOf","splice","push","setPositions","PositionChooser","observer","_this","join","width","height","fill","features","feat","Root","Root_class","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","createClass","value","length","glossTexts","filter","gt","components","some","component","code","undefined","gts","project","signs","forEach","senses","sense","_","sortBy","toLowerCase","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","doc","description","Dialect","id","abbr","focal","name","GrammarCategory","SentenceText","lang_name","lang_id","order","hash","_item","ExtraText","ExtraMediaFile","GlossText","Sens","dialects","grammar_category","extra_texts","extra_media_files","Sign","_this2","Project","sooSL_version","project_name","project_description","SooSL_version","Project_name","Project_description","Signs","App","possibleConstructorReturn","getPrototypeOf","call","App_descriptor","assertThisInitialized","componentDidMount","bind","message","PositionChooser_PositionChooser","Views_TopView","fetch","then","response","json","setGlossTexts","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8841e020.chunk.js","sourcesContent":["import React, { SFC } from 'react'\n\ninterface ICitationPlayer { url: string }\n\nexport default class CitationPlayer extends React.Component<ICitationPlayer> {\n    render() {\n        return (\n            <div>\n                <video \n                    className=\"CitationPlayer\"\n                    controls\n                    src={this.props.url}\n                    autoPlay={true} />\n            </div> \n        )\n    }\n}","import React, { SFC } from 'react'\r\n\r\nimport { Component, Dialect, GrammarCategory, GlossText, Sentence,\r\n         ExtraText, ExtraMediaFile, Sens, Sign, Project } from '../model/Project'\r\nimport { Root } from '../Root'\r\n\r\nimport CitationPlayer from './CitationPlayer'\r\nimport './Views.css'\r\n\r\ninterface TopViewProps { root: Root }\r\nexport const TopView: SFC<TopViewProps> = ({root}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"Header\">micro-SooSL</div>\r\n            <div className=\"Top\">\r\n                <GlossesListView root={root} />\r\n                <CitationView root={root} />\r\n                <TextInfoView root={root} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface GlossesListViewProps { root: Root }\r\nconst GlossesListView: SFC<GlossesListViewProps> = ({root}) => {\r\n    let { filteredGlossTexts } = root\r\n\r\n    return (\r\n        <div className=\"GlossesList\">\r\n            {filteredGlossTexts.map((glossText, i) => (\r\n                <GlossView key={i} glossText={glossText} root={root} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface GlossViewProps { glossText: GlossText, root: Root }\r\nconst GlossView: SFC<GlossViewProps> = ({glossText, root}) => {\r\n    let { selectedGlossText } = root\r\n    let className = 'Gloss' + (selectedGlossText && selectedGlossText.text === glossText.text ? ' GlossSelected' : '')\r\n\r\n    return (\r\n        <div className={className} onClick={() => {\r\n                    root.selectedGlossText = glossText\r\n                }}>\r\n            <div>{glossText.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface CitationViewProps { root: Root }\r\nconst CitationView: SFC<CitationViewProps> = ({root}) => {\r\n    let { selectedGlossText } = root\r\n    if (!selectedGlossText) return null\r\n\r\n    let { sign } = selectedGlossText.sens\r\n    if (!sign) return null\r\n\r\n    return (\r\n        <div className=\"Citation\">\r\n            <CitationPlayer url={`demo/${sign.path.slice(2)}`} />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface TextInfoViewProps { root: Root }\r\nconst TextInfoView: SFC<TextInfoViewProps> = ({root}) => {\r\n    return (\r\n        <div className=\"TextInfo\">\r\n            <GlossTextsView root={root} />\r\n            <SentencesView root={root} />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface GlossTextsViewProps { root: Root }\r\nconst GlossTextsView: SFC<GlossTextsViewProps> = ({root}) => {\r\n    let { selectedGlossText } = root\r\n    if (!selectedGlossText) return null\r\n\r\n    let { gloss_texts } = selectedGlossText.sens\r\n    return (\r\n        <div className=\"GlossTexts\">\r\n            { gloss_texts.map((glossText: GlossText, i) => (\r\n                <GlossTextView key={i} glossText={glossText} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface GlossTextViewProps { glossText: GlossText}\r\nconst GlossTextView: SFC<GlossTextViewProps> = ({glossText}) => {\r\n    return (\r\n        <div className=\"GlossText\">\r\n            <div>{glossText.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface SentencesViewProps { root: Root }\r\nconst SentencesView: SFC<SentencesViewProps> = ({root}) => {\r\n    let { selectedGlossText } = root\r\n    if (!selectedGlossText) return null\r\n\r\n    let { sentences } = selectedGlossText.sens\r\n\r\n    return (\r\n        <div className=\"Sentences\">\r\n            {sentences.map((Sentence: Sentence, i) => (\r\n                <SentenceView key={i} sentence={Sentence} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface SentenceViewProps { sentence: Sentence}\r\nconst SentenceView: SFC<SentenceViewProps> = ({sentence}) => {\r\n    return (\r\n        <div className=\"Sentence\">\r\n            <div>{sentence.sentence_texts[0].text}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\n\nexport default [\n    ['598', (props: any) => <ellipse {...props} ry=\"16\" rx=\"25.5\" cy=\"138.4375\" cx=\"242\" />],\n    ['638', (props: any) => <ellipse {...props} ry=\"16\" rx=\"25.5\" cy=\"139.4375\" cx=\"329\" />]\n]","import React, { Component } from 'react'\nimport { Root } from '../Root'\nimport { observer } from 'mobx-react'\nimport './Views.css'\n\nimport features from './positionFeatures'\n\nfunction Wrapper(props: any) {\n    let { featureName, contents, root } = props\n\n    let className = root.positions.includes(featureName) ? 'selected-feature' : 'unselected-feature'\n    \n    let onClick = () => {\n        console.log('onClick', featureName)\n        let positions = root.positions.slice()\n\n        let i = positions.indexOf(featureName)\n        if (i >= 0) {\n            positions.splice(i, 1)\n        } else {\n            positions.push(featureName)\n        }\n\n        root.setPositions(positions)\n    }\n\n    return contents({className, onClick}) \n}\n\ninterface IPositionChooser {\n    root: Root,\n}\n\n@observer\nexport default class PositionChooser extends Component<IPositionChooser> {\n    render() {\n        (this.props.root.positions).join('') // look at all positions to force a redraw\n\n        return (\n            <div>\n                <svg width=\"580\" height=\"400\">\n                    <ellipse ry=\"154.5\" rx=\"111.5\" cy=\"200.9375\" cx=\"287\" fill=\"#00f\" />\n                    {\n                        features.map(feat => \n                            <Wrapper key={feat[0]} featureName={feat[0]} contents={feat[1]} root={this.props.root} />\n                        )\n                    }\n                </svg>\n            </div>\n        )\n    }\n}\n","import { observable } from 'mobx'\nimport _ from 'underscore'\n\nimport { Project, GlossText } from './model/Project'\n\nexport class Root {\n    @observable project?: Project\n    @observable positions: string[] = []\n\n    @observable glossTexts: GlossText[] = []\n    @observable filteredGlossTexts: GlossText[] = []\n    @observable selectedGlossText?: GlossText\n\n    setPositions(positions: string[]) {\n        console.log('setPositions', positions)\n        // If some positions have been specified, select only signs that have at least\n        // one of the select components\n        if (positions.length) {\n            this.filteredGlossTexts = this.glossTexts.filter(gt => {\n                return gt.sens.sign.components.some(component => positions.includes(component.code))\n            })\n        }\n        else {\n            this.filteredGlossTexts = this.glossTexts\n        }\n\n        if (this.filteredGlossTexts.length) {\n            this.selectedGlossText = this.filteredGlossTexts[0]\n        } else {\n            this.selectedGlossText = undefined\n        }\n\n        this.positions = positions\n\n    }\n\n    setGlossTexts() {\n        let gts: GlossText[] = []\n        let signs = this.project && this.project.signs || []\n\n        signs.forEach(sign => {\n            sign.senses.forEach(sense => {\n                if (sense.gloss_texts.length) {\n                    gts.push(sense.gloss_texts[0])\n                }\n            })\n        })\n\n        this.glossTexts = _.sortBy(gts, gt => gt.text.toLowerCase())\n        console.log('glossTexts', this.glossTexts.length)\n\n        if (gts.length) this.selectedGlossText = this.glossTexts[0]\n    }\n}","export class Component {\n    code: string\n    description: string\n\n    constructor(doc: any) {\n        this.code = doc.code\n        this.description = doc.description\n    }\n}\n\nexport class Dialect {\n    id: number\n    abbr: string\n    focal: boolean\n    name: string\n\n    constructor(doc: any) {\n        this.id = doc.id\n        this.abbr = doc.abbr\n        this.focal = doc.focal\n        this.name = doc.name\n    }\n}\n\nexport class GrammarCategory {\n    id: number\n    name: string\n\n    constructor(doc: any) {\n        this.id = doc.id\n        this.name = doc.name\n    }\n}\n\nexport class SentenceText {\n    lang_name: string\n    lang_id: number\n    order: number\n    text: string\n\n    constructor(doc: any) {\n        this.lang_name = doc.lang_name\n        this.lang_id = doc.lang_id\n        this.order = doc.order\n        this.text = doc.text\n    }\n}\n\nexport class Sentence {\n    id: number\n    path: string\n    hash: string\n    sentence_texts: SentenceText[]\n\n    constructor(doc: any) {\n        this.id = doc.id\n        this.path = doc.path\n        this.hash = doc.hash\n        this.sentence_texts = (doc.sentence_texts || []).map((_item: any) => new SentenceText(_item))\n    }\n}\n\nexport class ExtraText {\n    lang_name: string\n    lang_id: number\n    order: number\n    text: string\n\n    constructor(doc: any) {\n        this.lang_name = doc.lang_name\n        this.lang_id = doc.lang_id\n        this.order = doc.order\n        this.text = doc.text\n    }\n}\n\nexport class ExtraMediaFile {\n    id: number\n    path: string\n    hash: string\n\n    constructor(doc: any) {\n        this.id = doc.id\n        this.path = doc.path\n        this.hash = doc.hash\n    }\n}\n\nexport class GlossText {\n    sens: Sens\n    lang_name: string\n    lang_id: number\n    order: number\n    text: string\n\n    constructor(sens: Sens, doc: any) {\n        this.sens = sens\n        this.lang_name = doc.lang_name\n        this.lang_id = doc.lang_id\n        this.order = doc.order\n        this.text = doc.text\n    }\n}\n\nexport class Sens {\n    sign: Sign\n    id: number\n    dialects: Dialect[]\n    grammar_category: GrammarCategory\n    gloss_texts: GlossText[]\n    sentences: Sentence[]\n    extra_texts: ExtraText[]\n    extra_media_files: ExtraMediaFile[]\n\n    constructor(sign: Sign, doc: any) {\n        this.sign = sign\n        this.id = doc.id\n        this.grammar_category = new GrammarCategory(doc.grammar_category)\n\n        this.dialects = (doc.dialects || []).map((_item: any) => new Dialect(_item))\n        this.gloss_texts = (doc.gloss_texts || []).map((_item: any) => new GlossText(this, _item))\n        this.sentences = (doc.sentences || []).map((_item: any) => new Sentence(_item))\n        this.extra_texts = (doc.extra_texts || []).map((_item: any) => new ExtraText(_item))\n        this.extra_media_files = (doc.extra_media_files || []).map((_item: any) => new ExtraMediaFile(_item))\n    }\n}\n\n// Sign\n//     senses\n// .       gloss_texts\n\nexport class Sign {\n    id: number\n    path: string\n    hash: string\n    components: Component[]\n    senses: Sens[]\n\n    constructor(doc: any) {\n        this.id = doc.id\n        this.path = doc.path\n        this.hash = doc.hash\n\n        this.components = (doc.components || []).map((component: any) => new Component(component))\n        this.senses = (doc.senses || []).map((sense: any) => new Sens(this, sense))\n    }\n}\n\nexport class Project {\n    sooSL_version: string\n    project_name: string\n    project_description: string\n    signs: Sign[]\n\n    constructor(doc: any) {\n        this.sooSL_version = doc.SooSL_version\n        this.project_name = doc.Project_name\n        this.project_description = doc.Project_description\n\n        this.signs = (doc.Signs || []).map((sign: any) => new Sign(sign))\n    }\n}\n","import React, { Component } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { TopView } from './components/Views'\nimport PositionChooser from './components/PositionChooser'\nimport { Root } from './Root'\nimport { Project } from './model/Project'\nimport { observable } from 'mobx'\n\n\n@observer // cause component to re-render whenver an observable item in svm changes\nclass App extends Component {\n  constructor(props: any) {\n    super(props)\n\n    this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n  root = new Root()\n  @observable message = 'Loading...'\n\n  render() {\n    this.root.selectedGlossText    // redraw when selected gloss changes\n    this.root.positions.length     // redraw when positions change\n\n    if (this.message) {\n      return (<div>{this.message} </div>)\n    }\n\n    return (\n      <div className=\"App\">\n        <PositionChooser root={this.root}/>\n        <TopView root={this.root} />\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    fetch('demo/project.json')\n      .then((response: any) => response.json())\n      .then((json: any) => {\n        console.log('json', json)\n        this.root.project = new Project(json)\n        this.root.setGlossTexts()\n        this.root.setPositions([])\n        this.message = ''\n      })\n      .catch(err => {\n        this.message = err.message\n      })\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}